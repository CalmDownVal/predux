{
	"root": true,
	"extends": [
		"@calmdownval/eslint-config",
		"@calmdownval/eslint-config/typescript"
	],
	"env": {
		"es6": true
	},
	"globals": {
		"globalThis": true
	},
	"parserOptions": {
		"project": "./packages/*/tsconfig.json"
	},
	"settings": {
		"import/resolver": {
			"@calmdownval/eslint-import-resolver-typescript": {
				"project": "./packages/*/tsconfig.json"
			}
		}
	},
	"rules": {
		"no-underscore-dangle": "off",
		"prefer-destructuring": "off",
		"prefer-rest-params": "off",
		"func-names": "off", // annoying, function names are not always needed
		"@typescript-eslint/naming-convention": [ // changed leading underscore settings
			"warn",
			// force camelCase for all values
			{
				"selector": [ "default" ],
				"format": [ "camelCase" ],
				"leadingUnderscore": "allow",
				"trailingUnderscore": "forbid"
			},

			// force PascalCase for all types
			{
				"selector": [ "typeLike" ],
				"format": [ "PascalCase" ],
				"leadingUnderscore": "allow"
			},

			// override for global and static member constants
			{
				"selector": [ "variableLike" ],
				"modifiers": [ "const", "global" ],
				"format": [ "camelCase", "PascalCase", "UPPER_CASE" ],
				"leadingUnderscore": "allow"
			},
			{
				"selector": [ "memberLike" ],
				"modifiers": [ "static" ],
				"format": [ "camelCase", "PascalCase", "UPPER_CASE" ],
				"leadingUnderscore": "allow"
			},

			// force PascalCase for enums
			{
				"selector": [ "enumMember" ],
				"format": [ "PascalCase" ],
				"leadingUnderscore": "allow"
			},

			// allow exotic naming when in quotes (useful for http headers etc.)
			{
				"selector": [ "objectLiteralProperty" ],
				"modifiers": [ "requiresQuotes" ],
				"format": null
			}
		],
		"@typescript-eslint/no-use-before-define": [
			"error",
			{
				"functions": false,
				"classes": true,
				"variables": false, // false = still checks stuff but avoids a few false-positives!
				"enums": true,
				"typedefs": false,
				"ignoreTypeReferences": true
			}
		]
	},
	"ignorePatterns": "rollup.config.js"
}
